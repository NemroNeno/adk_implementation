services:
  # --- OBSERVABILITY STACK ---
  prometheus:
    image: prom/prometheus:latest
    container_name: adk_prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    restart: unless-stopped

  # ... (prometheus service is unchanged) ...

  # ...
  loki:
    image: grafana/loki:2.9.0 # Use a specific, stable version
    container_name: adk_loki
    user: "0" # Run as root to fix permission issues
    volumes:
      - ./loki/loki-config.yml:/etc/loki/loki-config.yml
    command: -config.file=/etc/loki/loki-config.yml
    ports:
      - "3100:3100"
    restart: unless-stopped
# ...

# ... (rest of the file is unchanged) ...

  grafana:
    image: grafana/grafana-oss:latest
    container_name: adk_grafana
    ports:
      - "3001:3000" # Use port 3001 to avoid conflict with Next.js
    restart: unless-stopped
    depends_on:
      - loki
      - prometheus

  # --- APPLICATION STACK ---
  db:
    image: postgres:15
    container_name: adk_postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    # env_file is needed so 'docker-compose exec' can find the variables
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: adk_redis
    ports:
      - "6379:6379"
    restart: unless-stopped

  # ... (rest of the file is unchanged) ...

  backend:
    build:
      context: ./backend
      target: development
    container_name: adk_backend_api
    # --- THE FIX IS HERE ---
    # We point uvicorn to the 'socket_app' object in main.py
    command: uvicorn app.main:socket_app --host 0.0.0.0 --port 8000 --reload
    # --- END OF FIX ---
    volumes:
      - ./backend/app:/usr/src/app/app
      - ./backend/seed.py:/usr/src/app/seed.py
    ports:
      - "8000:8000"
    env_file:
      - .env
    # ... (rest of the backend service is unchanged) ...


    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_PRO_PLAN_PRICE_ID=${STRIPE_PRO_PLAN_PRICE_ID}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - db
      - redis
    restart: on-failure
    logging:
      driver: loki
      options:
        loki-url: "http://loki:3100/loki/api/v1/push"

  frontend:
    build:
      context: ./frontend
      target: development
    container_name: adk_frontend_ui
    command: npm run dev
    volumes:
      - ./frontend/app:/app/app
      - ./frontend/components:/app/components
      - ./frontend/context:/app/context
      - ./frontend/public:/app/public
    ports:
      - "3000:3000"
    # We only need to pass the public URL to the frontend
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    depends_on:
      - backend
    restart: on-failure
    logging:
      driver: loki
      options:
        loki-url: "http://loki:3100/loki/api/v1/push"

volumes:
  postgres_data: